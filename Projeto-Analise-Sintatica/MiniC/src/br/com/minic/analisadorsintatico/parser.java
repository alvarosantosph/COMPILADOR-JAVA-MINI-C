
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 11 22:00:19 GMT-03:00 2018
//----------------------------------------------------

package br.com.minic.analisadorsintatico;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 11 22:00:19 GMT-03:00 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\003\002\000\002\003\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\011\000\002\006\014\000\002" +
    "\010\002\000\002\010\003\000\002\011\003\000\002\011" +
    "\004\000\002\012\015\000\002\013\002\000\002\013\003" +
    "\000\002\014\005\000\002\015\002\000\002\015\004\000" +
    "\002\016\002\000\002\016\003\000\002\017\005\000\002" +
    "\020\002\000\002\020\004\000\002\021\002\000\002\021" +
    "\003\000\002\022\006\000\002\023\002\000\002\023\004" +
    "\000\002\026\002\000\002\026\003\000\002\025\003\000" +
    "\002\025\004\000\002\024\005\000\002\024\011\000\002" +
    "\024\007\000\002\024\007\000\002\024\007\000\002\024" +
    "\007\000\002\024\007\000\002\024\004\000\002\024\005" +
    "\000\002\024\006\000\002\027\005\000\002\027\006\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\006\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\002\000\002\036\003\000\002\037\003\000" +
    "\002\037\004\000\002\040\003\000\002\041\004\000\002" +
    "\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\005\ufffb\047\010\001\002\000\004\002" +
    "\225\001\002\000\006\005\ufff9\047\010\001\002\000\004" +
    "\005\020\001\002\000\004\005\ufffa\001\002\000\004\004" +
    "\011\001\002\000\004\027\012\001\002\000\004\022\013" +
    "\001\002\000\004\050\014\001\002\000\004\052\015\001" +
    "\002\000\004\031\016\001\002\000\006\005\ufff7\047\ufff7" +
    "\001\002\000\014\002\ufff5\005\025\006\044\007\043\010" +
    "\034\001\002\000\004\011\021\001\002\000\004\045\022" +
    "\001\002\000\004\046\023\001\002\000\004\043\024\001" +
    "\002\000\034\005\025\006\044\007\043\010\034\012\uffe1" +
    "\013\033\014\026\015\031\016\040\017\041\022\042\043" +
    "\035\051\uffeb\001\002\000\006\022\uffff\051\uffff\001\002" +
    "\000\004\045\173\001\002\000\004\012\167\001\002\000" +
    "\006\022\151\051\uffe6\001\002\000\004\045\145\001\002" +
    "\000\006\012\uffe0\044\uffe0\001\002\000\004\045\117\001" +
    "\002\000\006\022\ufffc\051\ufffc\001\002\000\034\005\025" +
    "\006\044\007\043\010\034\013\033\014\026\015\031\016" +
    "\040\017\041\022\042\043\035\044\uffe1\051\uffeb\001\002" +
    "\000\004\051\114\001\002\000\004\051\uffea\001\002\000" +
    "\004\045\110\001\002\000\004\045\104\001\002\000\004" +
    "\033\047\001\002\000\006\022\ufffd\051\ufffd\001\002\000" +
    "\006\022\ufffe\051\ufffe\001\002\000\036\005\025\006\044" +
    "\007\043\010\034\012\uffdf\013\033\014\026\015\031\016" +
    "\040\017\041\022\042\043\035\044\uffdf\051\uffeb\001\002" +
    "\000\006\012\uffde\044\uffde\001\002\000\016\022\057\023" +
    "\051\024\055\025\050\026\053\045\061\001\002\000\024" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\042\uffbc\045" +
    "\uffbc\046\uffbc\051\uffbc\001\002\000\034\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\045\uffc0\046\uffc0\051\uffc0\001\002\000\034" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\036\uffc6\037" +
    "\uffc6\040\070\041\067\042\uffc6\045\uffc6\046\uffc6\051\uffc6" +
    "\001\002\000\024\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\042\uffbb\045\uffbb\046\uffbb\051\uffbb\001\002\000\004" +
    "\051\103\001\002\000\034\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\045\uffbf\046\uffbf\051\uffbf\001\002\000\030\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\036\064\037\063\042\uffbd" +
    "\045\uffbd\046\uffbd\051\uffbd\001\002\000\034\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\045\074\046\uffc1\051\uffc1\001\002\000" +
    "\034\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\001\002\000\012\022\057\023\051\024\055\045\061" +
    "\001\002\000\010\036\064\037\063\046\065\001\002\000" +
    "\012\022\057\023\051\024\055\045\061\001\002\000\012" +
    "\022\057\023\051\024\055\045\061\001\002\000\034\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2\051\uffc2\001" +
    "\002\000\034\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\036\uffc8\037\uffc8\040\070\041\067\042\uffc8\045\uffc8\046" +
    "\uffc8\051\uffc8\001\002\000\012\022\057\023\051\024\055" +
    "\045\061\001\002\000\012\022\057\023\051\024\055\045" +
    "\061\001\002\000\034\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\045" +
    "\uffc4\046\uffc4\051\uffc4\001\002\000\034\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\045\uffc5\046\uffc5\051\uffc5\001\002\000\034" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\036\uffc7\037" +
    "\uffc7\040\070\041\067\042\uffc7\045\uffc7\046\uffc7\051\uffc7" +
    "\001\002\000\020\022\057\023\051\024\055\025\050\026" +
    "\053\045\061\046\uffba\001\002\000\020\022\057\023\051" +
    "\024\055\025\050\026\053\045\061\046\uffb8\001\002\000" +
    "\004\046\uffb9\001\002\000\020\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\045\uffb6\046\uffb6\001\002\000\004\046" +
    "\101\001\002\000\034\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\045" +
    "\uffbe\046\uffbe\051\uffbe\001\002\000\004\046\uffb7\001\002" +
    "\000\040\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4" +
    "\043\uffd4\044\uffd4\051\uffd4\001\002\000\016\022\057\023" +
    "\051\024\055\025\050\026\053\045\061\001\002\000\004" +
    "\046\106\001\002\000\004\051\107\001\002\000\040\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\043\uffd7\044" +
    "\uffd7\051\uffd7\001\002\000\016\022\057\023\051\024\055" +
    "\025\050\026\053\045\061\001\002\000\004\046\112\001" +
    "\002\000\004\051\113\001\002\000\040\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\022\uffd8\043\uffd8\044\uffd8\051\uffd8" +
    "\001\002\000\040\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\043\uffd6\044\uffd6\051\uffd6\001\002\000\004\044" +
    "\116\001\002\000\040\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\022\uffdd\043\uffdd\044\uffdd\051\uffdd\001\002\000\012" +
    "\022\123\023\125\024\124\053\120\001\002\000\004\045" +
    "\142\001\002\000\004\046\136\001\002\000\016\027\132" +
    "\030\133\031\131\032\134\034\126\035\130\001\002\000" +
    "\020\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1" +
    "\046\uffd1\001\002\000\020\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\034\uffcf\035\uffcf\046\uffcf\001\002\000\020\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\046\uffd0\001" +
    "\002\000\010\022\uffcc\023\uffcc\024\uffcc\001\002\000\010" +
    "\022\123\023\125\024\124\001\002\000\010\022\uffc9\023" +
    "\uffc9\024\uffc9\001\002\000\010\022\uffce\023\uffce\024\uffce" +
    "\001\002\000\010\022\uffcd\023\uffcd\024\uffcd\001\002\000" +
    "\010\022\uffca\023\uffca\024\uffca\001\002\000\010\022\uffcb" +
    "\023\uffcb\024\uffcb\001\002\000\004\046\uffd3\001\002\000" +
    "\032\005\025\006\044\007\043\010\034\013\033\014\026" +
    "\015\031\016\040\017\041\022\042\043\035\051\uffeb\001" +
    "\002\000\040\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\140\022" +
    "\uffdb\043\uffdb\044\uffdb\051\uffdb\001\002\000\032\005\025" +
    "\006\044\007\043\010\034\013\033\014\026\015\031\016" +
    "\040\017\041\022\042\043\035\051\uffeb\001\002\000\040" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\043\uffdc" +
    "\044\uffdc\051\uffdc\001\002\000\012\022\123\023\125\024" +
    "\124\053\120\001\002\000\004\046\144\001\002\000\004" +
    "\046\uffd2\001\002\000\016\022\057\023\051\024\055\025" +
    "\050\026\053\045\061\001\002\000\004\046\147\001\002" +
    "\000\004\051\150\001\002\000\040\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\022\uffd9\043\uffd9\044\uffd9\051\uffd9\001" +
    "\002\000\010\033\155\042\157\051\uffe8\001\002\000\004" +
    "\051\uffe5\001\002\000\004\051\154\001\002\000\040\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\043\uffd5\044" +
    "\uffd5\051\uffd5\001\002\000\016\022\057\023\051\024\055" +
    "\025\050\026\053\045\061\001\002\000\004\051\uffe9\001" +
    "\002\000\012\005\025\006\044\007\043\010\034\001\002" +
    "\000\004\022\162\001\002\000\004\051\uffe7\001\002\000" +
    "\006\042\157\051\uffe8\001\002\000\006\042\165\051\uffe3" +
    "\001\002\000\004\051\uffe4\001\002\000\006\042\165\051" +
    "\uffe3\001\002\000\004\051\uffe2\001\002\000\004\023\170" +
    "\001\002\000\004\051\171\001\002\000\004\044\172\001" +
    "\002\000\014\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\001\002\000\012\022\123\023\125\024\124\053\120\001" +
    "\002\000\004\046\175\001\002\000\032\005\025\006\044" +
    "\007\043\010\034\013\033\014\026\015\031\016\040\017" +
    "\041\022\042\043\035\051\uffeb\001\002\000\040\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\022\uffda\043\uffda\044\uffda" +
    "\051\uffda\001\002\000\004\022\204\001\002\000\014\002" +
    "\ufff3\005\025\006\044\007\043\010\034\001\002\000\004" +
    "\002\ufff4\001\002\000\004\002\000\001\002\000\004\002" +
    "\ufff2\001\002\000\004\045\205\001\002\000\014\005\025" +
    "\006\044\007\043\010\034\046\ufff0\001\002\000\004\022" +
    "\220\001\002\000\004\046\211\001\002\000\004\046\uffef" +
    "\001\002\000\004\043\212\001\002\000\034\005\025\006" +
    "\044\007\043\010\034\012\uffe1\013\033\014\026\015\031" +
    "\016\040\017\041\022\042\043\035\051\uffeb\001\002\000" +
    "\004\012\214\001\002\000\016\022\057\023\051\024\055" +
    "\025\050\026\053\045\061\001\002\000\004\051\216\001" +
    "\002\000\004\044\217\001\002\000\014\002\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\001\002\000\006\042\222\046" +
    "\uffed\001\002\000\004\046\uffee\001\002\000\012\005\025" +
    "\006\044\007\043\010\034\001\002\000\004\046\uffec\001" +
    "\002\000\004\005\ufff8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\012\002\003\003\005\004\006\005\004\001" +
    "\001\000\002\001\001\000\006\004\223\005\004\001\001" +
    "\000\004\006\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\176\010\201\011\200\012\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\027\016\035\017\036\024\044\025\031" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\152\022\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\027\016\035\017\036\024\044\025\031" +
    "\026\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\027\016\035\017" +
    "\036\024\044\025\045\001\001\000\002\001\001\000\012" +
    "\032\055\033\051\034\057\035\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\061\033\051" +
    "\034\057\001\001\000\002\001\001\000\006\033\072\034" +
    "\057\001\001\000\006\033\065\034\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\071\001\001\000" +
    "\004\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\032\055\033\051\034\057\035" +
    "\076\036\077\037\075\040\074\001\001\000\016\032\055" +
    "\033\051\034\057\035\076\037\101\040\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\055\033\051\034\057\035\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\055\033" +
    "\051\034\057\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\120\030\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\027\016" +
    "\035\017\036\024\136\001\001\000\002\001\001\000\012" +
    "\007\027\016\035\017\036\024\140\001\001\000\002\001" +
    "\001\000\006\027\142\030\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\055\033\051\034\057\035" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\055\033\051" +
    "\034\057\035\162\001\001\000\002\001\001\000\006\007" +
    "\157\017\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\155\001\001\000\004\023\163\001\001\000" +
    "\002\001\001\000\004\023\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\173\030\121\001\001\000\002" +
    "\001\001\000\012\007\027\016\035\017\036\024\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\176" +
    "\011\202\012\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\205" +
    "\013\206\014\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\027" +
    "\016\035\017\036\024\044\025\031\026\212\001\001\000" +
    "\002\001\001\000\012\032\055\033\051\034\057\035\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\220\001\001\000\002\001\001\000\006" +
    "\007\205\014\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Resto_Parametros ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_Parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Resto_Parametros ::= VIRGULA Resto_Parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Resto_Parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Parametros ::= Expressao 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ParametrosList ::= Parametros ParametrosList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ParametrosList ::= Parametros 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ParametrosOpt ::= ParametrosList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosOpt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ParametrosOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosOpt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expressao ::= LITERAL_STRING 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expressao ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expressao ::= ExprAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // F ::= IDENTIFICADOR ABRE_PARENTESES ParametrosOpt FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // F ::= LITERAL_PONTO_FLUTUANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // F ::= LITERAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= ABRE_PARENTESES ExprAritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= F 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= T DIV F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T ::= T MULT F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprAritmetica ::= T 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAritmetica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprAritmetica ::= ExprAritmetica SUB T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAritmetica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprAritmetica ::= ExprAritmetica SOMA T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAritmetica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OpRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OpRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OpRelacional ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OpRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OpRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OpRelacional ::= MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpRelAux ::= LITERAL_PONTO_FLUTUANTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRelAux",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpRelAux ::= LITERAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRelAux",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpRelAux ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRelAux",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpRel ::= NEGACAO ABRE_PARENTESES ExpRel FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRel",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpRel ::= ExpRelAux OpRelacional ExpRelAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRel",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Comando ::= IDENTIFICADOR ATRIBUICAO Expressao PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Comando ::= Tipo IdExpOpt PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Comando ::= IdOpt PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Comando ::= PRINTSTR ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Comando ::= PRINTINT ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Comando ::= PRINTF ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comando ::= WHILE ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Comando ::= IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Comando ::= IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando ELSE Comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Comando ::= ABRE_CHAVE DeclComando FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ComandoList ::= Comando ComandoList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ComandoList ::= Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DeclComando ::= ComandoList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DeclComando ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DecExplId ::= VIRGULA DecExplId 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecExplId",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DecExplId ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecExplId",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdExpList ::= IDENTIFICADOR ATRIBUICAO Expressao DecExplId 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdExpList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdExpOpt ::= IdExpList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdExpOpt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdExpOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdExpOpt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclId ::= VIRGULA IdList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclId ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IdList ::= Tipo IDENTIFICADOR DeclId 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IdOpt ::= IdList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdOpt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IdOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdOpt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RestoListaArgumentos ::= VIRGULA ParametrosDeclaracao 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RestoListaArgumentos ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParametrosDeclaracao ::= Tipo IDENTIFICADOR RestoListaArgumentos 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracao",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParametrosDeclaracaoOpt ::= ParametrosDeclaracao 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracaoOpt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParametrosDeclaracaoOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracaoOpt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclFuncao ::= Tipo IDENTIFICADOR ABRE_PARENTESES ParametrosDeclaracaoOpt FECHA_PARENTESES ABRE_CHAVE DeclComando RETURN Expressao PONTO_VIRGULA FECHA_CHAVE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FuncaoList ::= DeclFuncao FuncaoList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncaoList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FuncaoList ::= DeclFuncao 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncaoList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Funcao ::= FuncaoList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Funcao ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FuncaoMain ::= INT MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE DeclComando RETURN LITERAL_INTEIRO PONTO_VIRGULA FECHA_CHAVE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncaoMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclInclude",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclIncludeList ::= DeclInclude DeclIncludeList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclIncludeList ::= DeclInclude 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclIncludeOpt ::= DeclIncludeList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclIncludeOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipo ::= DOUBLE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramaMiniC ::= DeclIncludeOpt FuncaoMain Funcao 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramaMiniC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramaMiniC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

