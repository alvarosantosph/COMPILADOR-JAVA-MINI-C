
package br.com.minic.analisadorsintatico;

/* Simbolos Terminais */

terminal INCLUDE;
terminal INT, CHAR, FLOAT, DOUBLE;
terminal MAIN, RETURN, IF, WHILE, PRINTF, PRINTINT, PRINTSTR, ELSE, VOID;
terminal IDENTIFICADOR;
terminal LITERAL_INTEIRO;
terminal LITERAL_PONTO_FLUTUANTE;
terminal LITERAL_CHAR;
terminal LITERAL_STRING;
terminal MENOR, MENOR_IGUAL, MAIOR, MAIOR_IGUAL, ATRIBUICAO, IGUAL, DIFERENTE, SOMA, SUB, DIV, MULT, VIRGULA;
terminal ABRE_CHAVE, FECHA_CHAVE, ABRE_PARENTESES, FECHA_PARENTESES, JOGO_DA_VELHA, PONTO, PONTO_VIRGULA;
terminal LETRA_H, NEGACAO;

/* Simbolos Não Terminais */

non terminal ProgramaMiniC;

non terminal DeclIncludeOpt;
non terminal DeclIncludeList;
non terminal DeclInclude;

non terminal FuncaoMain;
non terminal Tipo;

non terminal Funcao;
non terminal FuncaoList;
non terminal DeclFuncao;

non terminal ParametrosDeclaracaoOpt;
non terminal ParametrosDeclaracao;
non terminal RestoListaArgumentos;

non terminal IdOpt;
non terminal IdList;
non terminal DeclId;

non terminal IdExpOpt;
non terminal IdExpList;
non terminal DecExplId;

non terminal Comando;
non terminal ComandoList;
non terminal DeclComando;

non terminal ExpRel;
non terminal ExpRelAux;
non terminal OpRelacional;

non terminal ExprAritmetica;
non terminal T;
non terminal F;
non terminal Expressao;
non terminal ParametrosOpt;
non terminal ParametrosList;
non terminal Parametros;
non terminal Resto_Parametros;

precedence left ELSE;

precedence left ABRE_PARENTESES;

/* Produções */

start with ProgramaMiniC;


ProgramaMiniC ::= DeclIncludeOpt FuncaoMain Funcao {::};


Tipo ::= INT | CHAR | FLOAT | DOUBLE {::};


DeclIncludeOpt ::=	{::} | DeclIncludeList {::};

				
DeclIncludeList ::=	DeclInclude {::} | DeclInclude DeclIncludeList {::};

			   			   
DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR {::};


FuncaoMain ::= INT MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE DeclComando RETURN LITERAL_INTEIRO PONTO_VIRGULA FECHA_CHAVE {::};


Funcao ::= {::} | FuncaoList {::};
FuncaoList ::= DeclFuncao {::} | DeclFuncao FuncaoList {::};
DeclFuncao ::= Tipo IDENTIFICADOR ABRE_PARENTESES ParametrosDeclaracaoOpt FECHA_PARENTESES ABRE_CHAVE DeclComando RETURN Expressao PONTO_VIRGULA FECHA_CHAVE {::};
ParametrosDeclaracaoOpt ::= {::} | ParametrosDeclaracao {::};
ParametrosDeclaracao ::= Tipo IDENTIFICADOR RestoListaArgumentos {::};
RestoListaArgumentos ::= {::} | VIRGULA ParametrosDeclaracao {::};


IdOpt ::= {::} | IdList {::};
IdList ::= Tipo IDENTIFICADOR DeclId {::};
DeclId ::= {::} | VIRGULA IdList {::};


IdExpOpt ::= {::} | IdExpList {::};
IdExpList ::= IDENTIFICADOR ATRIBUICAO Expressao DecExplId {::};
DecExplId ::= {::} | VIRGULA DecExplId {::};


DeclComando ::= {::} | ComandoList {::};
ComandoList ::= Comando {::} | Comando ComandoList {::};
Comando ::= ABRE_CHAVE DeclComando FECHA_CHAVE | IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando ELSE Comando | IF ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando | WHILE ABRE_PARENTESES ExpRel FECHA_PARENTESES Comando | PRINTF ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA | PRINTINT ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA | PRINTSTR ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA | IdOpt PONTO_VIRGULA | Tipo IdExpOpt PONTO_VIRGULA | IDENTIFICADOR ATRIBUICAO Expressao PONTO_VIRGULA {::};


ExpRel ::= ExpRelAux OpRelacional ExpRelAux | NEGACAO ABRE_PARENTESES ExpRel FECHA_PARENTESES {::};
ExpRelAux ::= IDENTIFICADOR | LITERAL_INTEIRO | LITERAL_PONTO_FLUTUANTE {::};
OpRelacional ::= MAIOR | MENOR | IGUAL | MAIOR_IGUAL | MENOR_IGUAL| DIFERENTE {::};


ExprAritmetica ::= ExprAritmetica SOMA T | ExprAritmetica SUB T | T {::};
T ::= T MULT F | T DIV F | F {::};
F ::= ABRE_PARENTESES ExprAritmetica FECHA_PARENTESES | IDENTIFICADOR | LITERAL_INTEIRO | LITERAL_PONTO_FLUTUANTE | IDENTIFICADOR ABRE_PARENTESES ParametrosOpt FECHA_PARENTESES {::};
Expressao ::= ExprAritmetica | LITERAL_CHAR | LITERAL_STRING {::};
ParametrosOpt ::= {::} | ParametrosList {::};
ParametrosList ::= Parametros {::} | Parametros ParametrosList {::};
Parametros ::= Expressao {::};
Resto_Parametros ::= VIRGULA Resto_Parametros | {::};




'